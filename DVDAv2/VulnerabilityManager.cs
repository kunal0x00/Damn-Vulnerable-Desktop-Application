using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Threading;

namespace DVDAv2
{
    public static class VulnerabilityManager
    {
        // Embedded database - creates if doesn't exist
        private static string GetDatabasePath()
        {
            string tempPath = Path.GetTempPath();
            string dbPath = Path.Combine(tempPath, "ShopVault", "vulnmart.db");
            
            // Ensure directory exists
            Directory.CreateDirectory(Path.GetDirectoryName(dbPath));
            
            // Create database if it doesn't exist
            if (!File.Exists(dbPath))
            {
                CreateEmbeddedDatabase(dbPath);
            }
            
            return dbPath;
        }
        
        private static void CreateEmbeddedDatabase(string dbPath)
        {
            try
            {
                // Create new SQLite database
                SQLiteConnection.CreateFile(dbPath);
                
                using (var connection = new SQLiteConnection($"Data Source={dbPath};Version=3;"))
                {
                    connection.Open();
                    
                    // Create tables
                    string createTables = @"
                        CREATE TABLE Users (
                            Id INTEGER PRIMARY KEY AUTOINCREMENT,
                            Username TEXT NOT NULL UNIQUE,
                            Password TEXT NOT NULL,
                            Email TEXT NOT NULL,
                            IsAdmin INTEGER DEFAULT 0,
                            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
                        );
                        
                        CREATE TABLE Products (
                            Id INTEGER PRIMARY KEY AUTOINCREMENT,
                            Name TEXT NOT NULL,
                            Description TEXT,
                            Price REAL NOT NULL,
                            Category TEXT,
                            ImageUrl TEXT,
                            Stock INTEGER DEFAULT 0,
                            CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
                        );
                        
                        CREATE TABLE Cart (
                            Id INTEGER PRIMARY KEY AUTOINCREMENT,
                            UserId INTEGER,
                            ProductId INTEGER,
                            Quantity INTEGER DEFAULT 1,
                            AddedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
                            FOREIGN KEY (UserId) REFERENCES Users(Id),
                            FOREIGN KEY (ProductId) REFERENCES Products(Id)
                        );";
                    
                    using (var command = new SQLiteCommand(createTables, connection))
                    {
                        command.ExecuteNonQuery();
                    }
                    
                    // Insert sample data
                    string insertData = @"
                        INSERT INTO Users (Username, Password, Email, IsAdmin) VALUES 
                        ('admin', 'admin123', 'admin@shopvault.com', 1),
                        ('john_doe', 'password', 'john@email.com', 0),
                        ('jane_smith', '123456', 'jane@email.com', 0),
                        ('test_user', 'test', 'test@email.com', 0),
                        ('vulnerable', 'qwerty', 'vuln@email.com', 0);
                        
                        INSERT INTO Products (Name, Description, Price, Category, ImageUrl, Stock) VALUES 
                        ('iPhone 15 Pro', 'Latest Apple smartphone with advanced camera', 999.99, 'Electronics', 'iphone15.jpg', 50),
                        ('Samsung Galaxy S24', 'Flagship Android smartphone with AI features', 899.99, 'Electronics', 'galaxy_s24.jpg', 30),
                        ('MacBook Pro 14', 'Professional laptop with M3 chip', 1999.99, 'Computers', 'macbook_pro.jpg', 20),
                        ('Dell XPS 13', 'Ultrabook with Intel Core i7 processor', 1299.99, 'Computers', 'dell_xps13.jpg', 25),
                        ('Sony WH-1000XM5', 'Noise-canceling wireless headphones', 399.99, 'Audio', 'sony_headphones.jpg', 100),
                        ('Nike Air Max 270', 'Comfortable running shoes', 149.99, 'Fashion', 'nike_air_max.jpg', 75),
                        ('Coffee Maker Pro', 'Programmable drip coffee maker', 79.99, 'Home', 'coffee_maker.jpg', 40),
                        ('Gaming Chair RGB', 'Ergonomic gaming chair with LED lighting', 299.99, 'Gaming', 'gaming_chair.jpg', 15);";
                    
                    using (var command = new SQLiteCommand(insertData, connection))
                    {
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Database creation error: {ex.Message}", "ShopVault", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        
        private static string connectionString = $"Data Source={GetDatabasePath()};Version=3;";
        private static string CONNECTION_STRING = $"Data Source={GetDatabasePath()};Version=3;";
        
        // DVTA-style hardcoded credentials (VULNERABILITY: Insecure local data storage)
        private static readonly Dictionary<string, string> HardcodedCredentials = new Dictionary<string, string>
        {
            { "admin", "admin123" },
            { "root", "toor" },
            { "sa", "sa" },
            { "guest", "" },
            { "test", "test123" },
            { "user", "password" },
            { "dvta", "p@ssw0rd" }
        };
        
        // VULNERABILITY: Hardcoded connection strings and API keys
        private static readonly string FtpServer = "192.168.1.100";
        private static readonly string FtpUsername = "ftpuser";
        private static readonly string FtpPassword = "ftp123!@#";
        private static readonly string DatabasePassword = "MySecretDbPassword123!";
        private static readonly string APIKey = "sk_live_51234567890abcdefghijklmnop";
        private static readonly string EncryptionKey = "YELLOWSUBMARINE";  // DVTA-style weak key
        
        // DA1 - Injections: SQLi, LDAP, XML, OS Command, etc.
        public static class DA1_Injections
        {
            // VULNERABILITY: Direct SQL injection (like DVTA)
            public static bool AuthenticateUser(string username, string password)
            {
                string query = "";
                try
                {
                    using (var connection = new SQLiteConnection(connectionString))
                    {
                        connection.Open();
                        
                        // VULNERABILITY: Direct string concatenation enables SQL injection
                        query = $"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'";
                        
                        LogVulnerableAction($"SQL Query Executed: {query}");
                        
                        using (var command = new SQLiteCommand(query, connection))
                        {
                            var result = command.ExecuteScalar();
                            return result != null;
                        }
                    }
                }
                catch (Exception ex)
                {
                    // VULNERABILITY: Detailed error messages expose DB structure
                    MessageBox.Show($"Database Error: {ex.Message}\nQuery: {query}\nConnection: {connectionString}");
                    LogVulnerableAction($"SQL Error exposed: {ex.Message}");
                    return false;
                }
            }
            
            // VULNERABILITY: OS Command Injection (DVTA-style)
            public static string ExecuteSystemCommand(string userInput)
            {
                try
                {
                    // VULNERABILITY: Unsanitized user input directly passed to system
                    string command = $"cmd.exe /c {userInput}";
                    
                    ProcessStartInfo startInfo = new ProcessStartInfo()
                    {
                        FileName = "cmd.exe",
                        Arguments = $"/c {userInput}",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = false  // VULNERABILITY: Visible command window
                    };
                    
                    LogVulnerableAction($"OS Command Injection: {command}");
                    
                    using (Process process = Process.Start(startInfo))
                    {
                        string result = process.StandardOutput.ReadToEnd();
                        string error = process.StandardError.ReadToEnd();
                        process.WaitForExit();
                        
                        return $"OUTPUT:\n{result}\n\nERROR:\n{error}";
                    }
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"Command execution error: {ex.Message}");
                    return $"Command execution error: {ex.Message}";
                }
            }
            
            // VULNERABILITY: CSV Injection (from DVTA)
            public static string ProcessCSVData(string csvInput)
            {
                try
                {
                    // VULNERABILITY: No CSV injection protection
                    string csvFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "vulnerable_export.csv");
                    
                    // Dangerous CSV content that can execute commands
                    string csvContent = $"Name,Email,Command\nUser1,user1@test.com,{csvInput}\n";
                    
                    File.WriteAllText(csvFile, csvContent);
                    LogVulnerableAction($"CSV Injection vulnerability: {csvInput} written to {csvFile}");
                    
                    return $"CSV file created at: {csvFile}\nContent: {csvContent}";
                }
                catch (Exception ex)
                {
                    return $"CSV processing error: {ex.Message}";
                }
            }
            
            // VULNERABILITY: XML External Entity (XXE)
            public static string ProcessXMLInput(string xmlInput)
            {
                try
                {
                    XmlDocument doc = new XmlDocument();
                    doc.XmlResolver = new XmlUrlResolver(); // VULNERABILITY: Enables XXE
                    doc.LoadXml(xmlInput);
                    
                    LogVulnerableAction($"XXE vulnerability: Processing XML with external entities enabled");
                    return $"XML processed successfully: {doc.InnerText}";
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"XXE processing error: {ex.Message}");
                    return $"XML processing error: {ex.Message}";
                }
            }
            
            public static string TestSQLInjection(string input)
            {
                var result = AuthenticateUser(input, "test");
                return $"SQL Injection test with input '{input}' - Authentication result: {result}";
            }
        }
        
        // DA2 - Broken Authentication & Session Management
        public static class DA2_BrokenAuthentication
        {
            // VULNERABILITY: Authentication bypass techniques
            public static bool AuthenticateWithHardcodedCredentials(string username, string password)
            {
                LogVulnerableAction($"Authentication attempt for user: {username}");
                
                // VULNERABILITY: Hardcoded admin backdoor
                if (username.ToLower() == "backdoor" && password == "letmein")
                {
                    LogVulnerableAction("BACKDOOR ACCESS GRANTED!");
                    StoreSessionInRegistry(username, password, true);
                    return true;
                }
                
                if (HardcodedCredentials.ContainsKey(username.ToLower()) && 
                    HardcodedCredentials[username.ToLower()] == password)
                {
                    StoreSessionInRegistry(username, password, username.ToLower() == "admin");
                    LogVulnerableAction($"User {username} authenticated - session stored in registry");
                    return true;
                }
                
                // VULNERABILITY: Timing attack possibility
                Thread.Sleep(100); // Same delay for all failed attempts
                return false;
            }
            
            // VULNERABILITY: Centralized insecure session storage
            public static void StoreSessionInRegistry(string username, string password, bool isAdmin)
            {
                try
                {
                    using (var key = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(@"SOFTWARE\DVDA"))
                    {
                        string sessionId = Guid.NewGuid().ToString();
                        key.SetValue("SessionID", sessionId);
                        key.SetValue("Username", username);
                        key.SetValue("Password", password);  // VULNERABILITY: Store password in plain text
                        key.SetValue("LoginTime", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                        key.SetValue("IsAdmin", isAdmin ? "true" : "false");
                        key.SetValue("LastActivity", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                        key.SetValue("AuthMethod", "hardcoded_credentials");
                        
                        LogVulnerableAction($"Registry session created - SessionID: {sessionId}");
                        LogVulnerableAction($"Stored credentials for: {username} (Admin: {isAdmin})");
                    }
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"Registry session storage failed: {ex.Message}");
                }
            }
            
            // VULNERABILITY: Weak session management
            public static bool ValidateSession()
            {
                try
                {
                    var sessionId = Registry.GetValue(@"HKEY_CURRENT_USER\Software\DVDA", "SessionID", null);
                    // VULNERABILITY: No session timeout check
                    return sessionId != null;
                }
                catch
                {
                    return false;
                }
            }
            
            // VULNERABILITY: Session cleanup (insecure)
            public static void ClearSession()
            {
                try
                {
                    using (var key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"SOFTWARE\DVDA", true))
                    {
                        if (key != null)
                        {
                            // VULNERABILITY: Partial cleanup - leaves traces
                            key.DeleteValue("SessionID", false);
                            key.DeleteValue("LastActivity", false);
                            // Password and other sensitive data intentionally left behind
                            LogVulnerableAction("Session partially cleared - sensitive data remains in registry");
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"Session cleanup failed: {ex.Message}");
                }
            }
            
            // Add method to get current session info
            public static string GetSessionInfo()
            {
                try
                {
                    using (var key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"SOFTWARE\DVDA"))
                    {
                        if (key != null)
                        {
                            var sessionId = key.GetValue("SessionID", "Not found");
                            var username = key.GetValue("Username", "Not found");
                            var email = key.GetValue("Email", "Not found");
                            var loginTime = key.GetValue("LoginTime", "Not found");
                            var isAdmin = key.GetValue("IsAdmin", "Not found");
                            
                            return $"Session Info:\n" +
                                   $"SessionID: {sessionId}\n" +
                                   $"Username: {username}\n" +
                                   $"Email: {email}\n" +
                                   $"LoginTime: {loginTime}\n" +
                                   $"IsAdmin: {isAdmin}\n" +
                                   $"Registry Path: HKCU\\SOFTWARE\\DVDA";
                        }
                        return "No active session found";
                    }
                }
                catch (Exception ex)
                {
                    return $"Error reading session: {ex.Message}";
                }
            }
            
            public static string DemonstrateWeakAuth()
            {
                return "Authentication vulnerabilities: Hardcoded credentials, registry storage, no session timeout, timing attacks possible.";
            }
        }
        
        // Utility methods
        private static void LogVulnerableAction(string action)
        {
            try
            {
                string logEntry = $"[{DateTime.Now}] VULNERABILITY: {action}\n";
                File.AppendAllText("vulnerability_log.txt", logEntry);
                Console.WriteLine($"VULN: {action}");
            }
            catch (Exception)
            {
                // Silently fail to avoid breaking the application
            }
        }
        
        // Admin authentication method for backward compatibility
        public static bool AuthenticateAdmin(string username, string password)
        {
            return DA2_BrokenAuthentication.AuthenticateWithHardcodedCredentials(username, password);
        }
        
        // E-commerce authentication methods with vulnerabilities
        public static bool AuthenticateUser(string email, string password)
        {
            bool authResult = false;
            string username = email.Split('@')[0]; // Extract username from email
            
            // DA2 - Weak authentication - accepts admin credentials and demo accounts
            if (email == "admin@shopvault.com" && password == "admin123")
            {
                authResult = true;
                username = "admin";
            }
            else if (email == "demo@test.com" && password == "demo")
            {
                authResult = true;
                username = "demo";
            }
            else
            {
                // DA1 - SQL injection in authentication (real vulnerability)
                try
                {
                    using (var connection = new System.Data.SQLite.SQLiteConnection(CONNECTION_STRING))
                    {
                        connection.Open();
                        // VULNERABILITY: Direct string concatenation enables SQL injection
                        string query = $"SELECT COUNT(*) FROM users WHERE email = '{email}' AND password = '{password}'";
                        
                        LogVulnerableAction($"SQL Authentication Query: {query}");
                        
                        using (var command = new System.Data.SQLite.SQLiteCommand(query, connection))
                        {
                            int count = Convert.ToInt32(command.ExecuteScalar());
                            authResult = count > 0;
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"SQL Authentication Error: {ex.Message}");
                    authResult = false;
                }
            }
            
            // DA2 - VULNERABILITY: Store ALL successful authentications in registry (session management flaw)
            if (authResult)
            {
                try
                {
                    // Create registry key if it doesn't exist
                    using (var key = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(@"SOFTWARE\DVDA"))
                    {
                        string sessionId = Guid.NewGuid().ToString();
                        key.SetValue("SessionID", sessionId);
                        key.SetValue("Username", username);
                        key.SetValue("Email", email);
                        key.SetValue("Password", password); // VULNERABILITY: Store password in plain text
                        key.SetValue("LoginTime", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                        key.SetValue("IsAdmin", username.ToLower() == "admin" ? "true" : "false");
                        key.SetValue("LastActivity", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                        
                        LogVulnerableAction($"Session stored in registry for user: {username} (Email: {email})");
                        LogVulnerableAction($"SessionID: {sessionId}");
                        LogVulnerableAction($"Registry path: HKCU\\SOFTWARE\\DVDA");
                    }
                }
                catch (Exception ex)
                {
                    LogVulnerableAction($"Registry session storage failed: {ex.Message}");
                }
            }
            
            return authResult;
        }
        
        public static string RegisterUser(string name, string email, string password)
        {
            try
            {
                using (var connection = new System.Data.SQLite.SQLiteConnection(CONNECTION_STRING))
                {
                    connection.Open();
                    
                    // Create users table if not exists
                    string createTableQuery = @"
                        CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT,
                            email TEXT,
                            password TEXT,
                            created_date DATETIME DEFAULT CURRENT_TIMESTAMP
                        )";
                    
                    using (var createCommand = new System.Data.SQLite.SQLiteCommand(createTableQuery, connection))
                    {
                        createCommand.ExecuteNonQuery();
                    }
                    
                    // DA1 - SQL injection vulnerability in registration
                    string insertQuery = $"INSERT INTO users (name, email, password) VALUES ('{name}', '{email}', '{password}')";
                    
                    using (var command = new System.Data.SQLite.SQLiteCommand(insertQuery, connection))
                    {
                        command.ExecuteNonQuery();
                        return "Success: Account created successfully!";
                    }
                }
            }
            catch (Exception ex)
            {
                // DA3 - Data exposure through detailed error messages
                return $"Registration failed: {ex.Message}";
            }
        }
        
        public static string AddToCart(int productId, int quantity)
        {
            // DA5 - Authorization bypass - no user validation
            try
            {
                using (var connection = new System.Data.SQLite.SQLiteConnection(CONNECTION_STRING))
                {
                    connection.Open();
                    
                    // Create cart table if not exists
                    string createTableQuery = @"
                        CREATE TABLE IF NOT EXISTS cart (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            product_id INTEGER,
                            quantity INTEGER,
                            user_session TEXT,
                            added_date DATETIME DEFAULT CURRENT_TIMESTAMP
                        )";
                    
                    using (var createCommand = new System.Data.SQLite.SQLiteCommand(createTableQuery, connection))
                    {
                        createCommand.ExecuteNonQuery();
                    }
                    
                    // DA4 - Insecure data storage - storing in plain text
                    string insertQuery = $"INSERT INTO cart (product_id, quantity, user_session) VALUES ({productId}, {quantity}, 'anonymous_user')";
                    
                    using (var command = new System.Data.SQLite.SQLiteCommand(insertQuery, connection))
                    {
                        command.ExecuteNonQuery();
                        return "Product added to cart successfully!";
                    }
                }
            }
            catch (Exception ex)
            {
                return $"Failed to add to cart: {ex.Message}";
            }
        }
        
        public static string SearchProducts(string searchTerm)
        {
            // DA1 - SQL injection vulnerability in search
            try
            {
                using (var connection = new System.Data.SQLite.SQLiteConnection(CONNECTION_STRING))
                {
                    connection.Open();
                    
                    // Create products table if not exists
                    string createTableQuery = @"
                        CREATE TABLE IF NOT EXISTS products (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT,
                            price REAL,
                            category TEXT,
                            description TEXT
                        )";
                    
                    using (var createCommand = new System.Data.SQLite.SQLiteCommand(createTableQuery, connection))
                    {
                        createCommand.ExecuteNonQuery();
                    }
                    
                    // DA1 - Vulnerable search query (SQL injection)
                    string searchQuery = $"SELECT * FROM products WHERE name LIKE '%{searchTerm}%' OR description LIKE '%{searchTerm}%'";
                    
                    using (var command = new System.Data.SQLite.SQLiteCommand(searchQuery, connection))
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            var results = new StringBuilder();
                            results.AppendLine($"Search Results for '{searchTerm}':");
                            results.AppendLine("================================");
                            
                            int count = 0;
                            while (reader.Read() && count < 10)
                            {
                                results.AppendLine($"• {reader["name"]} - ${reader["price"]}");
                                count++;
                            }
                            
                            if (count == 0)
                            {
                                results.AppendLine("No products found. Try searching for:");
                                results.AppendLine("• iPhone, MacBook, Gaming, Fashion, Books");
                                results.AppendLine("\n💡 Try SQL injection: ' OR '1'='1' --");
                            }
                            
                            return results.ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // DA3 - Data exposure through error messages
                return $"Search error: {ex.Message}\nQuery attempted: SELECT * FROM products WHERE name LIKE '%{searchTerm}%'";
            }
        }
        
        // Main test methods for MainForm
        public static string TestSQLInjection(string input)
        {
            try
            {
                var result = DA1_Injections.AuthenticateUser(input, "test");
                return $"SQL Injection test with input '{input}' - Authentication result: {result}";
            }
            catch (Exception ex)
            {
                return $"Error testing SQL injection: {ex.Message}";
            }
        }
        
        public static string TestWeakAuthentication()
        {
            try
            {
                var result = DA2_BrokenAuthentication.DemonstrateWeakAuth();
                return $"Weak Authentication Test:\n{result}";
            }
            catch (Exception ex)
            {
                return $"Error testing authentication: {ex.Message}";
            }
        }
        
        public static string TestDataExposure()
        {
            try
            {
                string user = "admin";
                string password = "password123";
                
                // VULNERABILITY: Sensitive data remains in memory and is logged
                string logEntry = $"[{DateTime.Now}] User login - Password: {password}, CC: 4111-1111-1111-1111, SSN: 123-45-6789";
                File.AppendAllText("debug.log", logEntry + "\n");
                File.AppendAllText("application.log", logEntry + "\n");
                File.AppendAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "sensitive_data.txt"), logEntry + "\n");
                
                LogVulnerableAction($"Sensitive data logged to multiple files");
                
                return $"Data Exposure Test: Sensitive data exposed for user {user}. Check debug.log, application.log, and Desktop files.";
            }
            catch (Exception ex)
            {
                return $"Error testing data exposure: {ex.Message}";
            }
        }
        
        public static string TestXXE(string xmlInput)
        {
            return DA1_Injections.ProcessXMLInput(xmlInput);
        }
        
        public static string TestAccessControl(string userId)
        {
            try
            {
                // VULNERABILITY: Client-side authorization checks only
                bool isAdmin = userId.ToLower().Contains("admin");
                string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), $"sensitive_{userId}.dat");
                
                // Create file with sensitive data
                File.WriteAllText(filePath, $"Sensitive data for {Environment.UserName}\nAPI Key: {APIKey}\nDB Password: {DatabasePassword}");
                
                LogVulnerableAction($"Created insecure file with default permissions: {filePath}");
                
                return $"User {userId} admin status: {isAdmin} (client-side check only)";
            }
            catch (Exception ex)
            {
                return $"Error testing access control: {ex.Message}";
            }
        }
        
        public static string TestGenericVulnerability(string vulnerabilityType)
        {
            return $"Testing {vulnerabilityType} vulnerability - see vulnerability_log.txt for details";
        }
        
        // Updated test methods for correct OWASP Desktop App Top 10
        public static string TestWeakCryptography()
        {
            try
            {
                // VULNERABILITY: Using MD5 for "encryption" (completely broken)
                using (MD5 md5 = MD5.Create())
                {
                    byte[] data = Encoding.UTF8.GetBytes("sensitive data");
                    byte[] hash = md5.ComputeHash(data);
                    
                    LogVulnerableAction("Used MD5 for encryption - completely broken!");
                    
                    // VULNERABILITY: Hardcoded AES key and IV
                    using (Aes aes = Aes.Create())
                    {
                        aes.Key = Encoding.UTF8.GetBytes("1234567890123456"); // 16 bytes - weak key
                        aes.IV = new byte[16]; // All zeros IV
                        
                        LogVulnerableAction("Used hardcoded AES key and zero IV");
                    }
                }
                
                return "Improper Cryptography Test: Demonstrated weak MD5 encryption, hardcoded keys, and zero IV.";
            }
            catch (Exception ex)
            {
                return $"Error testing cryptography: {ex.Message}";
            }
        }
        
        public static string TestSecurityMisconfiguration()
        {
            try
            {
                string config = $@"
===== DVDA SYSTEM CONFIGURATION =====

DATABASE CONFIG:
- Connection: {connectionString}
- Password: {DatabasePassword}

FTP CONFIG:
- Server: {FtpServer}
- Username: {FtpUsername}
- Password: {FtpPassword}

ENCRYPTION:
- Algorithm: XOR (weak)
- Key: {EncryptionKey}
- API Key: {APIKey}

HARDCODED ACCOUNTS:";

                foreach (var cred in HardcodedCredentials)
                {
                    config += $"\n- {cred.Key}/{cred.Value}";
                }

                config += $@"

SYSTEM INFO:
- OS: {Environment.OSVersion}
- User: {Environment.UserName}
- Machine: {Environment.MachineName}
- .NET Version: {Environment.Version}

DEBUG MODE: ENABLED
LOGGING: VERBOSE (includes sensitive data)
";

                MessageBox.Show(config, "DVDA Configuration", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                LogVulnerableAction("Complete system configuration exposed to user");
                
                // Store sensitive configuration in registry
                RegistryKey key = Registry.CurrentUser.CreateSubKey(@"SOFTWARE\DVDA\Config");
                key.SetValue("DatabasePassword", DatabasePassword);
                key.SetValue("FtpPassword", FtpPassword);
                key.SetValue("APIKey", APIKey);
                key.SetValue("EncryptionKey", EncryptionKey);
                key.Close();
                
                return "Security Misconfiguration Test: System configuration exposed and weak registry settings created.";
            }
            catch (Exception ex)
            {
                return $"Error testing security configuration: {ex.Message}";
            }
        }
        
        public static string TestInsecureCommunication()
        {
            try
            {
                // VULNERABILITY: Allow weak TLS versions
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
                LogVulnerableAction("Configured weak TLS protocols (SSL3, TLS1.0)");
                
                // VULNERABILITY: Using HTTP instead of HTTPS
                try
                {
                    using (WebClient client = new WebClient())
                    {
                        string url = $"http://httpbin.org/post";
                        string postData = $"username={Environment.UserName}&password=testpassword&apikey={APIKey}";
                        
                        LogVulnerableAction($"Sending sensitive data over HTTP: {postData}");
                        
                        client.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";
                        client.UploadString(url, postData);
                    }
                }
                catch (Exception)
                {
                    // Network error - continue with test
                }
                
                return "Insecure Communication Test: Weak TLS configured and data sent over unencrypted HTTP.";
            }
            catch (Exception ex)
            {
                return $"Error testing communication: {ex.Message}";
            }
        }
        
        public static string TestCodeQuality()
        {
            try
            {
                // VULNERABILITY: DLL Hijacking
                string dllPath = Path.Combine(Environment.CurrentDirectory, "vulnerable.dll");
                
                // Create a fake vulnerable DLL for demonstration
                if (!File.Exists(dllPath))
                {
                    File.WriteAllText(dllPath.Replace(".dll", ".txt"), "This would be a malicious DLL");
                }
                
                LogVulnerableAction($"DLL Hijacking vulnerability: Looking for DLL in {dllPath}");
                
                // VULNERABILITY: No code signing verification
                LogVulnerableAction($"Skipping code signature verification for: test.exe");
                
                // VULNERABILITY: Buffer overflow simulation
                char[] buffer = new char[10];
                string input = "This input is way too long for the buffer";
                
                for (int i = 0; i < input.Length; i++)
                {
                    if (i < buffer.Length)
                        buffer[i] = input[i];
                    else
                        LogVulnerableAction($"Buffer overflow at position {i}");
                }
                
                return "Poor Code Quality Test: Demonstrated missing code signing, DLL hijacking, and buffer overflow vulnerabilities.";
            }
            catch (Exception ex)
            {
                return $"Error testing code quality: {ex.Message}";
            }
        }
        
        public static string TestVulnerableComponents()
        {
            try
            {
                var result = new StringBuilder();
                result.AppendLine("VULNERABLE COMPONENTS DETECTED:");
                result.AppendLine("=====================================");
                
                var components = new Dictionary<string, string>
                {
                    { "jQuery", "1.4.2" }, // Known XSS vulnerabilities
                    { "Apache.Log4Net", "1.2.10" }, // Known vulnerabilities
                    { "Newtonsoft.Json", "4.5.11" }, // Deserialization vulnerabilities
                    { "System.Data.SQLite", "1.0.66" }, // Older version with issues
                    { "Microsoft.AspNet.Mvc", "3.0" } // Outdated MVC version
                };
                
                foreach (var component in components)
                {
                    result.AppendLine($"Component: {component.Key}");
                    result.AppendLine($"Version: {component.Value}");
                    result.AppendLine($"Status: VULNERABLE - Outdated version with known CVEs");
                    result.AppendLine("Recommendation: Update to latest secure version");
                    result.AppendLine("---");
                }
                
                LogVulnerableAction("Scanned for vulnerable components - multiple outdated libraries found");
                return result.ToString();
            }
            catch (Exception ex)
            {
                return $"Error testing vulnerable components: {ex.Message}";
            }
        }
        
        public static string TestInsufficientLogging()
        {
            try
            {
                // VULNERABILITY: Logging sensitive data
                string logEntry = $"[{DateTime.Now}] ACTION: LOGIN_ATTEMPT | SENSITIVE_DATA: password123 | USER: {Environment.UserName} | MACHINE: {Environment.MachineName}\n";
                
                // VULNERABILITY: Logging sensitive information in plain text
                File.AppendAllText("app.log", logEntry);
                File.AppendAllText("debug.log", logEntry);
                File.AppendAllText("audit.log", logEntry);
                
                LogVulnerableAction("Logged sensitive data in plain text files");
                
                // VULNERABILITY: Insufficient detail in logs
                string basicLog = $"{DateTime.Now}: User did something\n";
                File.AppendAllText("app.log", basicLog);
                
                LogVulnerableAction("Logged user activity with insufficient detail");
                
                // VULNERABILITY: No logging of sensitive security events
                LogVulnerableAction($"Sensitive action performed without proper logging: DELETE_USER_DATA by admin");
                
                return "Insufficient Logging Test: Sensitive data logged inappropriately - check app.log, debug.log, and audit.log files";
            }
            catch (Exception ex)
            {
                return $"Error testing logging: {ex.Message}";
            }
        }
        // E-COMMERCE SPECIFIC VULNERABLE METHODS
        
        public static string SearchInCategory(string category, string searchTerm)
        {
            try
            {
                string query = $"SELECT * FROM products WHERE category = '{category}' AND name LIKE '%{searchTerm}%'";
                return ExecuteProductQuery(query);
            }
            catch (Exception ex)
            {
                return $"🔥 CATEGORY SEARCH ERROR: {ex.Message}";
            }
        }

        private static string ExecuteProductQuery(string query)
        {
            using (var connection = new SQLiteConnection(connectionString))
            {
                connection.Open();
                using (var command = new SQLiteCommand(query, connection))
                {
                    using (var reader = command.ExecuteReader())
                    {
                        var results = new StringBuilder();
                        while (reader.Read())
                        {
                            results.AppendLine($"ID: {reader["id"]} | {reader["name"]} - ${reader["price"]}");
                        }
                        return results.Length > 0 ? results.ToString() : "No products found.";
                    }
                }
            }
        }

        public static string GetCartContents()
        {
            try
            {
                return "🛒 SHOPPING CART CONTENTS:\n" +
                       "================================\n" +
                       "1. iPhone 15 Pro - $999.00 (Qty: 1)\n" +
                       "2. MacBook Air - $1199.00 (Qty: 1)\n" +
                       "3. AirPods Pro - $249.00 (Qty: 2)\n" +
                       "--------------------------------\n" +
                       "Subtotal: $2,696.00\n" +
                       "Tax: $269.60\n" +
                       "Total: $2,965.60\n\n" +
                       "💳 Payment methods: **** **** **** 1234 (VISA)\n" +
                       "📧 Email: customer@vulnerable-shop.com\n" +
                       "📱 Phone: +1-555-VULNERABLE";
            }
            catch
            {
                return "Cart is empty";
            }
        }

        // DA3 - Data Exposure vulnerabilities
        public static string SubscribeNewsletter(string email)
        {
            try
            {
                // VULNERABILITY: No input validation, stored in plain text
                var userData = $"Email: {email}, IP: {GetLocalIP()}, Time: {DateTime.Now}, Browser: ShopVault Desktop Client";
                
                // VULNERABILITY: Sensitive data logged in plain text
                LogSensitiveData($"NEWSLETTER_SIGNUP: {userData}");
                
                // VULNERABILITY: Data stored in registry
                Registry.SetValue(@"HKEY_CURRENT_USER\Software\ShopVault\Marketing", email, DateTime.Now.ToString());
                
                return $"✅ Successfully subscribed {email} to our newsletter!\n\n" +
                       $"📧 Confirmation sent to: {email}\n" +
                       $"🎁 Welcome discount code: WELCOME20\n" +
                       $"📊 Your data has been stored for marketing analytics.";
            }
            catch (Exception ex)
            {
                return $"❌ Subscription failed: {ex.Message}";
            }
        }

        // DA4 - Weak Cryptography
        public static string ProcessPayment(string cardNumber, string cvv)
        {
            try
            {
                // VULNERABILITY: Weak DES encryption
                var encryptedCard = WeakDESEncrypt(cardNumber, "SHOP2024");
                var encryptedCvv = WeakDESEncrypt(cvv, "SHOP2024");
                
                // VULNERABILITY: Sensitive data logged
                LogSensitiveData($"PAYMENT_PROCESSED: Card={encryptedCard}, CVV={encryptedCvv}");
                
                // VULNERABILITY: Data stored in temp file
                File.WriteAllText(@"C:\temp\payment.log", $"Payment: {cardNumber.Substring(0, 4)}****{cardNumber.Substring(cardNumber.Length - 4)} - ${DateTime.Now}");
                
                return $"💳 PAYMENT PROCESSED SUCCESSFULLY!\n\n" +
                       $"Card: {cardNumber.Substring(0, 4)}****{cardNumber.Substring(cardNumber.Length - 4)}\n" +
                       $"Amount: $2,965.60\n" +
                       $"Transaction ID: TXN_{DateTime.Now.Ticks}\n" +
                       $"Time: {DateTime.Now}\n\n" +
                       $"🔐 Payment encrypted with DES algorithm\n" +
                       $"📋 Transaction logged for security";
            }
            catch (Exception ex)
            {
                return $"❌ Payment failed: {ex.Message}";
            }
        }

        public static string GetStoredPaymentMethods()
        {
            try
            {
                // VULNERABILITY: Weak encryption for stored data
                return "💳 STORED PAYMENT METHODS:\n" +
                       "=========================\n" +
                       "1. VISA **** **** **** 1234\n" +
                       "   Exp: 12/25, CVV: 123 (encrypted)\n" +
                       "   Cardholder: John Vulnerable\n\n" +
                       "2. MASTERCARD **** **** **** 5678\n" +
                       "   Exp: 08/26, CVV: 456 (encrypted)\n" +
                       "   Cardholder: Jane Insecure\n\n" +
                       "🔓 Encryption: DES with key 'SHOP2024'\n" +
                       "📁 Storage: Local registry + temp files";
            }
            catch
            {
                return "No payment methods found";
            }
        }

        public static string SavePaymentMethod(string cardNumber, string expiry, string cvv, string name)
        {
            try
            {
                // VULNERABILITY: Weak encryption and insecure storage
                var encrypted = WeakDESEncrypt($"{cardNumber}|{expiry}|{cvv}|{name}", "SHOP2024");
                Registry.SetValue(@"HKEY_CURRENT_USER\Software\ShopVault\Payments", $"Card_{DateTime.Now.Ticks}", encrypted);
                
                return $"💾 Payment method saved securely!\n\n" +
                       $"Card ending in: {cardNumber.Substring(cardNumber.Length - 4)}\n" +
                       $"Encryption: DES algorithm\n" +
                       $"Storage: Windows Registry";
            }
            catch (Exception ex)
            {
                return $"❌ Save failed: {ex.Message}";
            }
        }

        // DA5 - Authorization vulnerabilities
        public static string SearchOrders(string searchTerm)
        {
            try
            {
                // VULNERABILITY: No authorization check - any user can see any orders
                string query = $"SELECT * FROM orders WHERE order_id LIKE '%{searchTerm}%' OR customer_email LIKE '%{searchTerm}%'";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            var results = new StringBuilder();
                            results.AppendLine("📦 ORDER SEARCH RESULTS:");
                            results.AppendLine("=" + new string('=', 40));
                            
                            while (reader.Read())
                            {
                                results.AppendLine($"Order ID: {reader["order_id"]}");
                                results.AppendLine($"Customer: {reader["customer_email"]}");
                                results.AppendLine($"Total: ${reader["total"]}");
                                results.AppendLine($"Status: {reader["status"]}");
                                results.AppendLine($"Payment: {reader["payment_method"]}");
                                results.AppendLine("-" + new string('-', 30));
                            }
                            
                            return results.Length > 0 ? results.ToString() : "No orders found.";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return $"🔥 ORDER SEARCH ERROR: {ex.Message}";
            }
        }

        public static string ChangePassword(string currentPassword, string newPassword)
        {
            try
            {
                // VULNERABILITY: No verification of current password
                // VULNERABILITY: Weak password hashing (MD5)
                var weakHash = ComputeMD5Hash(newPassword);
                Registry.SetValue(@"HKEY_CURRENT_USER\Software\ShopVault\Auth", "Password", weakHash);
                
                return $"🔐 Password changed successfully!\n\n" +
                       $"New password hash (MD5): {weakHash}\n" +
                       $"Stored in: Windows Registry\n" +
                       $"⚠️ Note: MD5 hashing used for security";
            }
            catch (Exception ex)
            {
                return $"❌ Password change failed: {ex.Message}";
            }
        }

        // DA6 - Misconfiguration & DA8 - File/Path vulnerabilities
        public static string ExportUserData(string exportPath)
        {
            try
            {
                // VULNERABILITY: Path traversal, command injection
                var command = $"copy /Y \"user_data.csv\" \"{exportPath}\"";
                var processInfo = new ProcessStartInfo("cmd.exe", $"/c {command}")
                {
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true
                };
                
                using (var process = Process.Start(processInfo))
                {
                    var output = process.StandardOutput.ReadToEnd();
                    var error = process.StandardError.ReadToEnd();
                    process.WaitForExit();
                    
                    // VULNERABILITY: Detailed error information exposed
                    return $"📊 DATA EXPORT COMPLETED!\n\n" +
                           $"Export path: {exportPath}\n" +
                           $"Command executed: {command}\n" +
                           $"Output: {output}\n" +
                           $"Errors: {error}\n" +
                           $"Exit code: {process.ExitCode}";
                }
            }
            catch (Exception ex)
            {
                return $"❌ Export failed: {ex.Message}";
            }
        }

        public static string ImportUserPreferences(string filePath)
        {
            try
            {
                // VULNERABILITY: XXE injection
                var xmlDoc = new XmlDocument();
                xmlDoc.Load(filePath);  // DANGEROUS: Direct file load without validation
                
                var preferences = xmlDoc.InnerXml;
                Registry.SetValue(@"HKEY_CURRENT_USER\Software\ShopVault\Preferences", "Settings", preferences);
                
                return $"📥 PREFERENCES IMPORTED!\n\n" +
                       $"File: {filePath}\n" +
                       $"XML Content: {preferences}\n" +
                       $"Stored in: Windows Registry";
            }
            catch (Exception ex)
            {
                return $"❌ Import failed: {ex.Message}";
            }
        }

        // Admin functions with vulnerabilities
        public static string GenerateSalesReport(string dateRange)
        {
            try
            {
                // VULNERABILITY: SQL injection in report generation
                string query = $"SELECT SUM(total) as revenue, COUNT(*) as orders FROM orders WHERE order_date >= '{dateRange}'";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                return $"📈 SALES REPORT - {dateRange}\n" +
                                       $"=" + new string('=', 40) + "\n" +
                                       $"Total Revenue: ${reader["revenue"]}\n" +
                                       $"Total Orders: {reader["orders"]}\n" +
                                       $"Average Order: ${Convert.ToDouble(reader["revenue"]) / Convert.ToInt32(reader["orders"]):F2}\n" +
                                       $"Generated: {DateTime.Now}";
                            }
                        }
                    }
                }
                return "No data found for the specified date range.";
            }
            catch (Exception ex)
            {
                return $"🔥 REPORT ERROR: {ex.Message}\nQuery: SELECT SUM(total) as revenue FROM orders WHERE order_date >= '{dateRange}'";
            }
        }

        public static string ExecuteRawQuery(string query)
        {
            try
            {
                // VULNERABILITY: Direct SQL execution without any validation
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        if (query.TrimStart().ToUpper().StartsWith("SELECT"))
                        {
                            using (var reader = command.ExecuteReader())
                            {
                                var results = new StringBuilder();
                                results.AppendLine($"⚡ QUERY EXECUTED: {query}");
                                results.AppendLine("=" + new string('=', 50));
                                
                                // Get column names
                                for (int i = 0; i < reader.FieldCount; i++)
                                {
                                    results.Append($"{reader.GetName(i)}\t");
                                }
                                results.AppendLine();
                                results.AppendLine("-" + new string('-', 50));
                                
                                // Get data
                                while (reader.Read())
                                {
                                    for (int i = 0; i < reader.FieldCount; i++)
                                    {
                                        results.Append($"{reader[i]}\t");
                                    }
                                    results.AppendLine();
                                }
                                
                                return results.ToString();
                            }
                        }
                        else
                        {
                            int rowsAffected = command.ExecuteNonQuery();
                            return $"⚡ QUERY EXECUTED: {query}\n" +
                                   $"Rows affected: {rowsAffected}";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return $"🔥 SQL EXECUTION ERROR: {ex.Message}\n\nQuery attempted: {query}";
            }
        }

        public static string SearchCustomers(string searchTerm)
        {
            try
            {
                // VULNERABILITY: SQL injection + no authorization check
                string query = $"SELECT * FROM customers WHERE name LIKE '%{searchTerm}%' OR email LIKE '%{searchTerm}%' OR phone LIKE '%{searchTerm}%'";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            var results = new StringBuilder();
                            results.AppendLine("👥 CUSTOMER SEARCH RESULTS:");
                            results.AppendLine("=" + new string('=', 50));
                            
                            while (reader.Read())
                            {
                                results.AppendLine($"ID: {reader["id"]}");
                                results.AppendLine($"Name: {reader["name"]}");
                                results.AppendLine($"Email: {reader["email"]}");
                                results.AppendLine($"Phone: {reader["phone"]}");
                                results.AppendLine($"Address: {reader["address"]}");
                                results.AppendLine($"Credit Card: {reader["credit_card"]}");
                                results.AppendLine($"SSN: {reader["ssn"]}");
                                results.AppendLine("-" + new string('-', 40));
                            }
                            
                            return results.Length > 0 ? results.ToString() : "No customers found.";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return $"🔥 CUSTOMER SEARCH ERROR: {ex.Message}";
            }
        }

        public static string UpdateCustomer(string customerId, string newEmail)
        {
            try
            {
                // VULNERABILITY: SQL injection + no authorization
                string query = $"UPDATE customers SET email = '{newEmail}' WHERE id = {customerId}";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        int rowsAffected = command.ExecuteNonQuery();
                        return $"✅ Customer {customerId} updated!\n" +
                               $"New email: {newEmail}\n" +
                               $"Rows affected: {rowsAffected}\n" +
                               $"Query: {query}";
                    }
                }
            }
            catch (Exception ex)
            {
                return $"❌ Update failed: {ex.Message}";
            }
        }

        public static string DeleteCustomer(string customerId)
        {
            try
            {
                // VULNERABILITY: SQL injection + no authorization + no confirmation
                string query = $"DELETE FROM customers WHERE id = {customerId}";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        int rowsAffected = command.ExecuteNonQuery();
                        return $"🗑️ CUSTOMER DELETED!\n" +
                               $"Customer ID: {customerId}\n" +
                               $"Rows deleted: {rowsAffected}\n" +
                               $"⚠️ This action cannot be undone!";
                    }
                }
            }
            catch (Exception ex)
            {
                return $"❌ Deletion failed: {ex.Message}";
            }
        }

        public static string ProcessInventoryFile(string filePath)
        {
            try
            {
                // VULNERABILITY: File upload without validation, XXE, CSV injection
                if (filePath.EndsWith(".xml", StringComparison.OrdinalIgnoreCase))
                {
                    var xmlDoc = new XmlDocument();
                    xmlDoc.Load(filePath);  // VULNERABLE to XXE
                    return $"📤 XML INVENTORY PROCESSED!\n\n" +
                           $"File: {filePath}\n" +
                           $"XML Content: {xmlDoc.InnerXml}\n" +
                           $"Products imported from XML feed.";
                }
                else if (filePath.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
                {
                    var csvContent = File.ReadAllText(filePath);
                    // VULNERABILITY: CSV injection - no sanitization
                    return $"📊 CSV INVENTORY PROCESSED!\n\n" +
                           $"File: {filePath}\n" +
                           $"Content preview:\n{csvContent.Substring(0, Math.Min(csvContent.Length, 500))}...\n" +
                           $"Products imported from CSV.";
                }
                else
                {
                    return "❌ Unsupported file format. Please use CSV or XML.";
                }
            }
            catch (Exception ex)
            {
                return $"❌ File processing failed: {ex.Message}";
            }
        }

        public static string SearchInventory(string searchTerm)
        {
            try
            {
                // VULNERABILITY: SQL injection in inventory search
                string query = $"SELECT * FROM inventory WHERE product_name LIKE '%{searchTerm}%' OR category LIKE '%{searchTerm}%'";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        using (var reader = command.ExecuteReader())
                        {
                            var results = new StringBuilder();
                            results.AppendLine("📋 INVENTORY SEARCH RESULTS:");
                            results.AppendLine("=" + new string('=', 50));
                            
                            while (reader.Read())
                            {
                                results.AppendLine($"Product ID: {reader["id"]}");
                                results.AppendLine($"Name: {reader["product_name"]}");
                                results.AppendLine($"Category: {reader["category"]}");
                                results.AppendLine($"Quantity: {reader["quantity"]}");
                                results.AppendLine($"Price: ${reader["price"]}");
                                results.AppendLine($"Supplier: {reader["supplier"]}");
                                results.AppendLine("-" + new string('-', 40));
                            }
                            
                            return results.Length > 0 ? results.ToString() : "No inventory items found.";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return $"🔥 INVENTORY SEARCH ERROR: {ex.Message}";
            }
        }

        public static string UpdateInventory(string productId, string newQuantity)
        {
            try
            {
                // VULNERABILITY: SQL injection + no authorization
                string query = $"UPDATE inventory SET quantity = {newQuantity} WHERE id = {productId}";
                using (var connection = new SQLiteConnection(connectionString))
                {
                    connection.Open();
                    using (var command = new SQLiteCommand(query, connection))
                    {
                        int rowsAffected = command.ExecuteNonQuery();
                        return $"📝 INVENTORY UPDATED!\n" +
                               $"Product ID: {productId}\n" +
                               $"New Quantity: {newQuantity}\n" +
                               $"Rows affected: {rowsAffected}";
                    }
                }
            }
            catch (Exception ex)
            {
                return $"❌ Inventory update failed: {ex.Message}";
            }
        }

        // Helper methods
        private static string GetLocalIP()
        {
            try
            {
                string hostName = Dns.GetHostName();
                IPAddress[] addresses = Dns.GetHostAddresses(hostName);
                foreach (IPAddress address in addresses)
                {
                    if (address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                        return address.ToString();
                }
                return "127.0.0.1";
            }
            catch
            {
                return "Unknown";
            }
        }

        private static void LogSensitiveData(string data)
        {
            try
            {
                // VULNERABILITY: Sensitive data logged in plain text
                string logPath = @"C:\temp\shopvault.log";
                File.AppendAllText(logPath, $"[{DateTime.Now}] {data}\n");
            }
            catch
            {
                // Ignore logging errors
            }
        }

        private static string WeakDESEncrypt(string plainText, string key)
        {
            try
            {
                // VULNERABILITY: Using deprecated DES encryption
                byte[] keyBytes = Encoding.UTF8.GetBytes(key.PadRight(8).Substring(0, 8));
                byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);
                
                using (DES des = DES.Create())
                {
                    des.Key = keyBytes;
                    des.IV = keyBytes;
                    
                    using (var encryptor = des.CreateEncryptor())
                    {
                        byte[] encrypted = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);
                        return Convert.ToBase64String(encrypted);
                    }
                }
            }
            catch
            {
                return plainText; // Return plaintext if encryption fails
            }
        }

        private static string ComputeMD5Hash(string input)
        {
            // VULNERABILITY: Using weak MD5 hashing
            using (MD5 md5 = MD5.Create())
            {
                byte[] inputBytes = Encoding.UTF8.GetBytes(input);
                byte[] hashBytes = md5.ComputeHash(inputBytes);
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
            }
        }

        private static void StoreInMemory(string key, string value)
        {
            // VULNERABILITY: Sensitive data stored in memory without protection
            // This would be detectable by memory dumps
            System.Threading.Thread.MemoryBarrier();
        }

        // DA6 - Security Misconfiguration with UAC and Privilege Escalation
        public static string TestUACBypass()
        {
            try
            {
                // DA6 - Demonstrate improper UAC handling
                string result = "🔴 UAC BYPASS DEMONSTRATION:\n";
                result += "================================\n\n";
                
                // Check if running with elevated privileges
                var identity = System.Security.Principal.WindowsIdentity.GetCurrent();
                var principal = new System.Security.Principal.WindowsPrincipal(identity);
                bool isElevated = principal.IsInRole(System.Security.Principal.WindowsBuiltInRole.Administrator);
                
                result += $"Current User: {identity.Name}\n";
                result += $"Elevated Privileges: {isElevated}\n";
                result += $"Authentication Type: {identity.AuthenticationType}\n\n";
                
                if (isElevated)
                {
                    result += "⚠️  VULNERABILITY EXPOSED:\n";
                    result += "- Application running with admin privileges\n";
                    result += "- Can access system registry\n";
                    result += "- Can modify system files\n";
                    result += "- DA6: Security misconfiguration detected\n\n";
                    
                    // Demonstrate registry access (safe operations)
                    result += TestRegistryAccess();
                }
                else
                {
                    result += "ℹ️  Limited privileges detected.\n";
                    result += "Run as administrator to see full vulnerability impact.\n";
                }
                
                return result;
            }
            catch (Exception ex)
            {
                return $"UAC Test Error: {ex.Message}";
            }
        }

        public static string TestRegistryAccess()
        {
            try
            {
                string result = "📋 REGISTRY ACCESS TEST:\n";
                result += "-------------------------\n";
                
                // DA6 - Registry manipulation vulnerability (read-only for safety)
                using (var key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"Software"))
                {
                    if (key != null)
                    {
                        result += "✅ Registry access successful\n";
                        result += $"Registry key: {key.Name}\n";
                        result += $"Subkey count: {key.SubKeyCount}\n";
                        
                        // DA4 - Store sensitive data in registry (demonstration)
                        var testKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(@"Software\ShopVault");
                        testKey?.SetValue("DemoSecret", "VulnerablePassword123");
                        testKey?.SetValue("APIKey", "sk-1234567890abcdef");
                        testKey?.Close();
                        
                        result += "\n🔴 VULNERABILITY: Sensitive data stored in registry!\n";
                        result += "Location: HKCU\\Software\\ShopVault\n";
                        result += "Check with: reg query HKCU\\Software\\ShopVault\n";
                    }
                }
                
                return result;
            }
            catch (Exception ex)
            {
                return $"Registry access error: {ex.Message}";
            }
        }

        public static string TestFileSystemAccess()
        {
            try
            {
                string result = "📁 FILE SYSTEM ACCESS TEST:\n";
                result += "----------------------------\n";
                
                // DA4 - Insecure file storage
                string tempPath = System.IO.Path.GetTempPath();
                string vulnFile = System.IO.Path.Combine(tempPath, "shopvault_secrets.txt");
                
                // Write sensitive data to temp file (vulnerability)
                string sensitiveData = @"ShopVault Configuration
========================
Database Password: VulnPassword123
API Keys: 
  - Payment Gateway: pk_live_1234567890
  - Email Service: sg.1234567890.abcdef
Admin Credentials:
  - Username: admin@shopvault.com  
  - Password: admin123
JWT Secret: supersecretkey12345
";
                
                System.IO.File.WriteAllText(vulnFile, sensitiveData);
                
                result += $"✅ File created: {vulnFile}\n";
                result += "🔴 VULNERABILITY: Secrets stored in plain text!\n";
                result += "This file contains sensitive configuration data.\n";
                result += "Accessible by any user or malware on the system.\n\n";
                
                // DA8 - Poor code quality - file permissions not set properly
                var fileInfo = new System.IO.FileInfo(vulnFile);
                result += $"File size: {fileInfo.Length} bytes\n";
                result += $"Created: {fileInfo.CreationTime}\n";
                result += "⚠️  No file permission restrictions applied (DA8)\n";
                
                return result;
            }
            catch (Exception ex)
            {
                return $"File system test error: {ex.Message}";
            }
        }

        public static string TestPrivilegeEscalation()
        {
            try
            {
                string result = "🚀 PRIVILEGE ESCALATION TEST:\n";
                result += "==============================\n";
                
                // DA5 - Authorization bypass demonstration
                result += "Attempting to access restricted resources...\n\n";
                
                // Check current privileges
                var identity = System.Security.Principal.WindowsIdentity.GetCurrent();
                var principal = new System.Security.Principal.WindowsPrincipal(identity);
                
                string[] roles = {
                    "Administrator",
                    "User", 
                    "PowerUser",
                    "Guest"
                };
                
                foreach (string role in roles)
                {
                    try
                    {
                        var builtInRole = (System.Security.Principal.WindowsBuiltInRole)Enum.Parse(
                            typeof(System.Security.Principal.WindowsBuiltInRole), role);
                        bool hasRole = principal.IsInRole(builtInRole);
                        result += $"🔍 {role}: {(hasRole ? "✅ GRANTED" : "❌ DENIED")}\n";
                    }
                    catch
                    {
                        result += $"🔍 {role}: ❓ UNKNOWN\n";
                    }
                }
                
                result += "\n🔴 DA5 VULNERABILITY DEMONSTRATED:\n";
                result += "- Application requests unnecessary admin privileges\n";
                result += "- Violates principle of least privilege\n";
                result += "- Potential for privilege abuse\n";
                
                return result;
            }
            catch (Exception ex)
            {
                return $"Privilege escalation test error: {ex.Message}";
            }
        }
    }
}
